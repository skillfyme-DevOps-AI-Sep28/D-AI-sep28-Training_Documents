Ansible Installation & Configurations:

Launch - Ubuntu - v22.04 | 3 EC2 Instances... 1 for Ansible Controller & 2 as Nodes - ubuntu v22.04

SSH connections :::

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Login to Ansible Node1 & Node2. Perform below activities:

#Add User in Ansible Nodes : 

sudo -i

apt update -y 

useradd ansibleadmin -s /bin/bash -m -d /home/ansibleadmin 

passwd ansibleadmin

#Enter New Password:
#Confirm Password:

#Goto:

vi /etc/ssh/sshd_config

#Enable Password Authentication to Yes and save the file
#Execute Below command to update the changes.

service ssh reload

#As a root user edit below file:

$ visudo

#add the below mentioned line in the file and save it.
 
ansibleadmin ALL=(ALL) NOPASSWD: ALL

su - ansibleadmin

ls -a 



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#Login to Ansible Controller:
https://docs.ansible.com/ansible/latest/installation_guide/installation_distros.html

https://docs.ansible.com/ansible/latest/installation_guide/installation_distros.html#installing-ansible-on-ubuntu

sudo -i

sudo apt update -y

sudo apt install software-properties-common -y
sudo add-apt-repository --yes --update ppa:ansible/ansible
sudo apt update -y
sudo apt install ansible -y

ansible --version

#go to /etc/ansible

#host - Default inventory file
#config
#roles 

#Add User in Ansible Controller : 

useradd devopsadmin -s /bin/bash -m -d /home/devopsadmin

#useradd devopsadmin

su - devopsadmin	

#ssh-keygen -t rsa -b 1024 -m PEM

#ssh-keygen -R rsa -b 1024 -m PEM
ssh-keygen -t ecdsa -b 521										#ubuntu 22.04 or higher version of ubuntu				

ls ~/.ssh 

#You should see following two files:

#id_ecdsa - private key
#id_ecdsa.pub - public


#Goto Node1&2, within ansibleadmin home directory, create .ssh directory

vi authorized_keys

#paste the id_ecdsa.pub of devopsadmin user from controller machine to authorized_keys file in Ansible Node1 

chmod 600 /home/ansibleadmin/.ssh/*


# Use the private IP addr. of AN1 and AN2

ssh ansibleadmin@172.31.8.233
ssh ansibleadmin@172.31.15.31

chown -R devopsadmin:devopsadmin /etc/ansible

#chmod 600 /home/ansibleadmin/.ssh/*


###update vi etc/ansible/hosts


[testnodes]
samplenode1 ansible_ssh_host=172.31.8.233 ansible_ssh_user=ansibleadmin
samplenode2 ansible_ssh_host=172.31.15.31 ansible_ssh_user=ansibleadmin


Eg.::: 

samplenode3 ansible_ssh_host=172.31.38.135 ansible_ssh_user=ansibleadmin
samplenode4 ansible_ssh_host=172.31.38.39 ansible_ssh_user=ansibleadmin

[devnodes]
devnode1 ansible_ssh_host=172.31.5.190 ansible_ssh_user=ansibleadmin
devnode2 ansible_ssh_host=172.31.6.228 ansible_ssh_user=ansibleadmin


[webappservers]
webappserver1 ansible_ssh_host=172.31.9.49 ansible_ssh_user=ansibleadmin
webappserver2 ansible_ssh_host=172.31.9.209 ansible_ssh_user=ansibleadmin
webappserver3 ansible_ssh_host=172.31.9.209 ansible_ssh_user=ansibleadmin




		
















#**************************************************************************************************************************
#hosts file is the default Inventory file for ansible 
#**************************************************************************************************************************
#Access thru Ansible Controller :
#**************************************************************************************************************************

ansible <hosts_name> -m <module_name> -i <inventory_file>

ansible testnodes -m ping 

ansible devnodes -m ping 


ansible dev_server_grp1 -m ping -i dev_servers

#host machines can be identified using :
#all | group_name | individual_host_name















[testnodes]
samplenode1 ansible_ssh_host=172.31.34.144 ansible_ssh_user=ansibleadmin
samplenode2 ansible_ssh_host=172.31.45.232 ansible_ssh_user=ansibleadmin

















[testnodes]
samplenode1 ansible_ssh_host=172.31.42.39 ansible_ssh_user=ansibleadmin
samplenode2 ansible_ssh_host=172.31.35.215 ansible_ssh_user=ansibleadmin






###update vi /etc/ansible/host

[testnodes]
samplenode1 ansible_ssh_host=172.31.41.32 ansible_ssh_user=ansibleadmin
samplenode2 ansible_ssh_host=172.31.39.17 ansible_ssh_user=ansibleadmin

##################################################################################

#**************************************************************************************************************************
#Access thru Ansible Controller :
#**************************************************************************************************************************
Ansible Modules: Eg.: 
ansible testnodes -m ping

ansible all -m ping ### will ping all hosts from /etc/ansible/hosts file

ansible samplenode1 -m ping
ansible samplenode2 -m ping

#or using user defined Inventory file
#ansible ansible-node1 -m ping -i myinventoryfile.txt


ansible samplenode1 -m ping -i myinventoryfile.txt

#**************************************************************************************************************************

ansible samplenode2 -m ping

ansible samplenode1 -m shell -a "sleep 5 ; echo 'hi'"


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Ansible Facts!

ansible samplenode1 -m setup
ansible samplenode1 -m setup -a "filter=ansible_mounts"


ansible testnodes -m setup -a "filter=ansible_distribution"




#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##Transfer a file from Ansible Controller to Target Nodes using copy Module

ansible samplenode1 -m copy -a "src=/etc/ansible/file1.txt dest=/home/ansibleadmin"

ansible samplenode1 -m copy -a "src=/etc/ansible/s1.txt dest=/home/ansibleadmin backup=yes"



##Transfer a file from Ansible Nodes to Ansible Controller using fetch Module
ansible samplenode1 -m fetch -a "src=/home/ansibleadmin/filefrom_AN1.txt dest=/home/devopsadmin"



#**************************************************************************************************************************

Ansible Playbooks :::

*.yaml scripts 		==> Key-value pair

- Playbook creation



Playbooks :::::

	- *.yaml Script
	- Defines the Tasks/Modules to be executed in target nodes.
	- Reusability
	
	
Build Server :::

	- install jdk 
	- install git 
	- install maven


#**************************************************************************************************************************
#Ansible Variables !
#shell : echo $var1 

in yaml : "{{var1}}"


ansible samplenode1 -m setup

debug - 
	msg 	- used to print the constant value and variable data
	var 	- used to print only the variable data

key:Value pair 

#debugmod.yaml / *.yml

---
 - hosts: testnodes
   tasks:
   - debug:  
      msg:
       - "The os distribution is: {{ansible_distribution}}" 
       - "THe os name is: {{ansible_system}}"
       - "The os family is: {{ansible_os_family}}"
	   
	   
	Execute :::
	
			ansible-playbook debugmod.yaml 
echo "${var1}" $var1

"{{var1}}"

debug -a msg / var 


Debug Module :
	msg 
	var  "{{ansible_distribution}}"
	
	"{{var1}}"

echo $var1


setup Module :

setup module is the default module.

YAML ::

			"{{var1}}"

	debug :
		msg 
		var 


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~~~~~~~~~~~~~~~~~~~~~~~~~ test_var-datatype.yaml
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#test_var-datatype.yaml
---
 - hosts: samplenode1
   vars:
    x: 23
    my_num: 45.67
    my_name: Loksai
    my_b: YES   
   tasks:
   - debug:
      msg:
       - "The value of x is: {{x}}"
       - "THe value of my_num: {{my_num}}"
       - "The value of my_name : {{my_name}}"
       - "THe value of my_b is: {{my_b}}"



---
 - hosts: testnodes
   become: yes
   tasks:
   - name: Manage nginx tool
     apt:
       name: nginx
       state: present





	name : nginx
	
	state : present/absent/latest
	
	sudo apt install nginx			# In Linux Ubuntu 



	   
apt install git -y

apt remove git -y

name : Used to identify the Name of the Package 

state : Used to define the state - present/absent/latest	   
	   
Package Manager :::: Is used to Manage the Packages in the Node - Install/Uninstall/Upgrade

	apt 	ubuntu 
	yum
	dnf
	rpm 





















git ==> apt install/uninstall/update 

apt ::

	name : <name of the package>
	
	state : present/absent/latest 



#var3.yaml
---
 - hosts: "{{ host_name }}"
   become: yes
   tasks:
   - name: Manage "{{ tool_name }}" service
     apt:
       name: "{{ tool_name }}"
       state: "{{ tool_state }}"



ansible-playbook var4.yaml -e "host_name=testnodes tool_name=nginx tool_state=present"


Handling Variables in Ansible :::

	- Environment variables -- accessible using Setup Module.
	
	- Hardcoding the values in playbook 
		using vars :
	
	- Using External Variable files :
		using var_files

	- Using -e to pass the values at run time.



#ansible-playbook testfile.yaml --syntax-check



Using When Condition :::

---
  - hosts: testnodes
    become: yes
    tasks:
      - name: Install-nginx on Debian
        apt:
          name: nginx
          state: "{{pkg_state}}"
        when: ansible_os_family == "Debian"
      - name: Install-nginx on Redhat
        yum:
          name: nginx
          state: "{{pkg_state}}"
        when: ansible_os_family == "RedHat"



#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~~~~~~~~~~~~~~~~~~~~~~~~~ register and set-facts
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#test_var-datatype.yaml
---
 - hosts: samplenode1
   gather_facts: false
   tasks:
   - shell: "bash --version"



#test_var-datatype.yaml
---
 - hosts: samplenode1
   tasks:
   - shell: "bash --version"
     register: bash_ver
   - debug: var=bash_ver

		  
Handlers --> are used to control the flow of playbook execution, based on the previous modules
		This can be done thru notify key.

		Handlers are same as tasks.
		But, it gets executed only if we notify.



Handlers :::

	Handlers are used to control the flow of execution of tasks.
	
	Tasks 1 :::
	
	QA_Server 
	
		Tomcat :::
				
			1. Install the Pre-requisites		# jdk 			# jdk 
			2. Install the actual tool 			# tomcat 		# jenkins 
			3. Configure/setup the tool			# start tomcat  # unlock jenkins and setup



		  
Ansible Roles ::::
	


	
		  
Ansible Roles :::

		Are used to organize the Ansible Components 
		
		for Reusability
		
		Use git remote repositories to maintain the Ansible Roles.
		
			variable/handlers/defaults/secrets/tasks
			
			Playbooks 
			
			
		Roles can be created using :::
		
			- ansible-galaxy init testrole1 
				Roles can be defined at enterprise level / global level.
				
			





		
Working with Handlers using Ansible Roles :::


ansible-galaxy init testrole1

---
# tasks file for testrole1
      - name: Install-nginx
        apt:
          name: nginx
          state: present
        notify:
        - start-nginx


---
# handlers file for testrole1
    - name: start-nginx
      service:
          name: nginx
          state: started


---
- hosts: samplenode1
  become: yes
  roles:
    - role: testrole1
    - role: testrole

---
- hosts: {{host_name}}
  become: yes
  roles:
    - role: {{role_name}}	





Loops :

---
  - hosts: samplenode1
    become: yes
    tasks:
      - apt:
         name: git
         state: present
      - apt:
         name: maven
         state: present
      - apt:
         name: nginx
         state: present




Loops :::

---
  - hosts: samplenode1
    gather_facts: false
    become: yes
    tasks:
      - apt:
         name: "{{item}}"
         state: absent
        loop:
          - git
          - maven
          - nginx
 
 
 
